{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#binary-cookies","title":"Binary Cookies","text":"<p>Python library and CLI tool for reading and writing binary cookies files.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><pre><code>pip install binarycookies\n</code></pre> If you want to use the parser as CLI, it's recommended to use pipx to install the package in an isolated environment. <pre><code>pipx install binarycookies\n</code></pre></p>"},{"location":"#basic-usage-cli","title":"Basic Usage CLI","text":"<p>After installation, you can use the command-line interface to read a binary cookies file:</p> <p><pre><code>bcparser &lt;path_to_binary_cookies_file&gt;\n</code></pre> Replace  with the path to the binary cookie file you want to read."},{"location":"#basic-usage-python","title":"Basic Usage Python","text":""},{"location":"#deserialization","title":"Deserialization","text":"<pre><code>import binarycookies \n\nwith open(\"path/to/cookies.binarycookies\", \"rb\") as f:\n    cookies = binarycookies.load(f)\n</code></pre>"},{"location":"#serialization","title":"Serialization","text":"<pre><code>import binarycookies \n\ncookie = {\n    \"name\": \"session_id\",\n    \"value\": \"abc123\",\n    \"url\": \"https://example.com\",\n    \"path\": \"/\",\n    \"create_datetime\": \"2023-10-01T12:34:56+00:00\",\n    \"expiry_datetime\": \"2023-12-31T23:59:59+00:00\",\n    \"flag\": \"Secure\"\n}\n\nwith open(\"path/to/cookies.binarycookies\", \"wb\") as f:\n    binarycookies.dump(cookie, f)\n</code></pre>"},{"location":"#output-types","title":"Output Types","text":"<p>The <code>bcparser</code> CLI supports two output types: <code>json</code> (default) and <code>ascii</code>.</p>"},{"location":"#json-output","title":"JSON Output","text":"<p>The <code>json</code> output type formats the cookies as a JSON array, making it easy to parse and manipulate programmatically.</p> <p>Example usage: <pre><code>bcparser path/to/cookies.binarycookies --output json\n</code></pre></p> <p>Example output JSON: <pre><code>[\n  {\n    \"name\": \"session_id\",\n    \"value\": \"abc123\",\n    \"url\": \"https://example.com\",\n    \"path\": \"/\",\n    \"create_datetime\": \"2023-10-01T12:34:56+00:00\",\n    \"expiry_datetime\": \"2023-12-31T23:59:59+00:00\",\n    \"flag\": \"Secure\"\n  },\n  {\n    \"name\": \"user_token\",\n    \"value\": \"xyz789\",\n    \"url\": \"https://example.com\",\n    \"path\": \"/account\",\n    \"create_datetime\": \"2023-10-01T12:34:56+00:00\",\n    \"expiry_datetime\": \"2023-12-31T23:59:59+00:00\",\n    \"flag\": \"HttpOnly\"\n  }\n]\n</code></pre></p>"},{"location":"#ascii-output","title":"ASCII Output","text":"<p>The ascii output type formats the cookies in a simple, line-by-line text format, making it easy to read and pipe to other command-line tools.</p> <p>Example usage: <pre><code>bcparser path/to/cookies.binarycookies --output ascii\n</code></pre></p> <p>Example output ASCII: <pre><code>Name: session_id\nValue: abc123\nURL: https://example.com\nPath: /\nCreated: 2023-10-01T12:34:56+00:00\nExpires: 2023-12-31T23:59:59+00:00\nFlag: Secure\n----------------------------------------\nName: user_token\nValue: xyz789\nURL: https://example.com\nPath: /account\nCreated: 2023-10-01T12:34:56+00:00\nExpires: 2023-12-31T23:59:59+00:00\nFlag: HttpOnly\n----------------------------------------\n</code></pre></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you find a bug or have a feature request, please open an issue on GitHub. Pull requests are also welcome.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#binarycookies.dump","title":"<code>dump(cookies, f)</code>","text":"<p>Dumps a Binary Cookies object to create a binary cookies file.k</p> <p>Parameters:</p> Name Type Description Default <code>cookies</code> <code>CookiesCollection</code> <p>A Binary Cookies object to be serialized.</p> required <code>f</code> <code>Union[BufferedWriter, BytesIO, BinaryIO]</code> <p>The file-like object to write the binary cookies data to.</p> required Source code in <code>src/binarycookies/_serialize.py</code> <pre><code>def dump(cookies: CookiesCollection, f: Union[BufferedWriter, BytesIO, BinaryIO]):\n    \"\"\"Dumps a Binary Cookies object to create a binary cookies file.k\n\n    Args:\n        cookies: A Binary Cookies object to be serialized.\n        f: The file-like object to write the binary cookies data to.\n    \"\"\"\n    binary = dumps(cookies)\n    f.write(binary)\n</code></pre>"},{"location":"api/#binarycookies.dumps","title":"<code>dumps(cookies)</code>","text":"<p>Dumps a Binary Cookies object to a byte string. Args:     cookies: A Binary Cookies object to be serialized. Returns:     bytes: The serialized binary cookies data.</p> Source code in <code>src/binarycookies/_serialize.py</code> <pre><code>def dumps(cookies: CookiesCollection) -&gt; bytes:\n    \"\"\"Dumps a Binary Cookies object to a byte string.\n    Args:\n        cookies: A Binary Cookies object to be serialized.\n    Returns:\n        bytes: The serialized binary cookies data.\n    \"\"\"\n    if isinstance(cookies, dict):\n        cookies = [Cookie.model_validate(cookies)]\n    elif isinstance(cookies, (list, tuple)):\n        cookies = [Cookie.model_validate(cookie) for cookie in cookies]\n    elif isinstance(cookies, Cookie):\n        cookies = [cookies]\n    else:\n        raise TypeError(\"Invalid type for cookies. Expected dict, list, tuple, or Cookie.\")\n\n    file_fields = FileFields()\n\n    data = BytesIO()\n\n    # Write file header\n    write_field(data, file_fields.header, \"cook\")\n\n    # Number of pages (1 for simplicity)\n    write_field(data, file_fields.num_pages, 1)\n\n    # Write number of cookies\n    data.write(pack(Format.integer, len(cookies)))\n\n    # Placeholder for page size\n    page_size_offset = data.tell()\n    data.write(b\"\\x00\\x00\\x00\\x00\")\n\n    # Write number of cookies\n    data.write(pack(Format.integer, len(cookies)))\n    cookie_data_list = []\n    # Write cookies\n    for cookie in cookies:\n        cookie_data_list.append(serialize_cookie(cookie))\n\n    initial_cookie_offset = data.tell() + (len(cookies) * 4)\n    initial_cookie = True\n    previous_sizes = 0\n    for cookie_data in cookie_data_list:\n        if initial_cookie:\n            data.write(pack(Format.integer, initial_cookie_offset))\n            initial_cookie = False\n        else:\n            data.write(pack(Format.integer, previous_sizes + initial_cookie_offset))\n\n        previous_sizes += len(cookie_data)\n\n    # Unknown data\n    data.write(b\"\\x00\\x00\\x00\\x00\")\n    data.write(b\"\\x00\\x00\\x00\\x00\")\n    data.write(b\"\\x00\\x00\\x00\\x00\")\n\n    for cookie_data in cookie_data_list:\n        data.write(cookie_data)\n\n    # Update page size\n    page_size = data.tell()\n    data.seek(page_size_offset)\n    data.write(pack(Format.integer, page_size))\n\n    return data.getvalue()\n</code></pre>"},{"location":"api/#binarycookies.load","title":"<code>load(bf)</code>","text":"<p>Deserializes a binary cookie file and returns a list of Cookie objects.</p> <p>Parameters:</p> Name Type Description Default <code>bf</code> <code>BinaryIO</code> <p>A binary file object containing the binary cookie data.</p> required <p>Returns:     List[Cookie]: A list of Cookie objects.</p> Source code in <code>src/binarycookies/_deserialize.py</code> <pre><code>def load(bf: BinaryIO) -&gt; List[Cookie]:\n    \"\"\"Deserializes a binary cookie file and returns a list of Cookie objects.\n\n    Args:\n        bf (BinaryIO): A binary file object containing the binary cookie data.\n    Returns:\n        List[Cookie]: A list of Cookie objects.\n    \"\"\"\n    # Check if the file is empty\n    if bf.readable() and bf.read(1) == b\"\":\n        raise BinaryCookiesDecodeError(\"The file is empty.\")\n    # Reset the file pointer to the beginning\n    bf.seek(0)\n    # Check if the file is a valid binary cookies file\n    if bf.readable() and bf.read(4) != b\"cook\":\n        raise BinaryCookiesDecodeError(\"The file is not a valid binary cookies file. Missing magic String:cook.\")\n    # Reset the file pointer to the beginning\n    bf.seek(0)\n    # Deserialize the binary cookies file\n    return loads(BytesIO(bf.read()))\n</code></pre>"},{"location":"api/#binarycookies.loads","title":"<code>loads(b)</code>","text":"<p>Deserializes a binary cookie file and returns a list of Cookie objects.</p> <p>Parameters:</p> Name Type Description Default <code>b</code> <code>BytesIO</code> <p>A BytesIO object containing the binary cookie data.</p> required <p>Returns:     List[Cookie]: A list of Cookie objects.</p> Source code in <code>src/binarycookies/_deserialize.py</code> <pre><code>def loads(b: BytesIO) -&gt; List[Cookie]:\n    \"\"\"Deserializes a binary cookie file and returns a list of Cookie objects.\n\n    Args:\n        b (BytesIO): A BytesIO object containing the binary cookie data.\n    Returns:\n        List[Cookie]: A list of Cookie objects.\n    \"\"\"\n    all_cookies = []\n    file_fields = FileFields()\n\n    # Number of pages in the binary file: 4 bytes\n    num_pages = read_field(b, field=file_fields.num_pages)\n    page_sizes = get_file_pages(b, num_pages)\n\n    pages = []\n    b.seek(8 + (num_pages * 4))\n    for ps in page_sizes:\n        # Grab individual pages and each page will contain &gt;= one cookie\n        pages.append(b.read(ps))\n\n    for page in pages:\n        cookies = _deserialize_page(BytesIO(page))\n        all_cookies.extend(cookies)\n\n    return all_cookies\n</code></pre>"},{"location":"cli/","title":"Command Line Interface","text":"<p>binarycookies provides a command-line interface to easily read binary cookie files.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>The CLI is automatically installed when you install the package:</p> <pre><code>pip install binarycookies\n</code></pre>"},{"location":"cli/#usage","title":"Usage","text":"<p>bcparser FILE_PATH [--output FORMAT]</p>"},{"location":"cli/#arguments","title":"Arguments","text":"<ul> <li><code>FILE_PATH</code>: Path to the binary cookies file you want to read.</li> </ul>"},{"location":"cli/#options","title":"Options","text":"<ul> <li><code>--output FORMAT</code>: Specify the output format. Supported formats are <code>json</code> (default) and <code>ascii</code>.</li> </ul>"},{"location":"cli/#examples","title":"Examples","text":"<p>JSON Output (Default): <pre><code>bcparser /path/to/cookies.binarycookies\n</code></pre> ASCII Output: <pre><code>bcparser /path/to/cookies.binarycookies --output ascii\n</code></pre> This will display cookies in a human-readable format with each cookie property on a separate line.</p>"},{"location":"cli/#adding-to-your-scripts","title":"Adding to Your Scripts","text":"<p>The CLI functionality can be integrated into your Python scripts as follows:</p> <pre><code>from binarycookies.__main__ import cli\n\n# Read and output cookies in JSON format\ncli(\"path/to/Cookies.binarycookies\", output=\"json\")\n\n# Read and output cookies in ASCII format\ncli(\"path/to/Cookies.binarycookies\", output=\"ascii\")\n</code></pre>"}]}